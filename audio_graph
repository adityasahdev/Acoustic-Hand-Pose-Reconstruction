import numpy as np
import matplotlib.pyplot as plt
import librosa
import librosa.display
from scipy.fft import fft
import sys
import os




folder_name = 'p1'
time_stamp = '20241114_144022'


audio_list = ["C:\\Users\\leapuser\\PycharmProjects\\leap_project\\data\\", folder_name,"\\audio\\",time_stamp,".wav"]
audio_path =  ''.join(audio_list)
print(audio_path)

y, sr = librosa.load(audio_path, sr=None)


y = y / np.max(np.abs(y))


plt.figure(figsize=(12, 12))


'''plt.subplot(3, 1, 1)
plt.plot(np.linspace(0, len(y) / sr, num=len(y)), y)
plt.title("Time Domain")
plt.xlabel("Time (seconds)")
plt.ylabel("Amplitude")'''

plt.subplot(2, 1, 1)
Y = fft(y)
freqs = np.fft.fftfreq(len(Y), 1 / sr)
plt.plot(freqs[:len(freqs) // 2], np.abs(Y[:len(Y) // 2]))  # Positive frequencies only
plt.xlim(0, 24000)  # Limit to 24 kHz
plt.title("Frequency Domain")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")


plt.subplot(2, 1, 2)
n_fft = 8192  # Larger FFT window for high frequency resolution
hop_length = 512  # Set hop length for overlapping frames
D = librosa.amplitude_to_db(np.abs(librosa.stft(y, n_fft=n_fft, hop_length=hop_length)), ref=np.max)
librosa.display.specshow(D, sr=sr, x_axis='time', y_axis='linear')  # Linear frequency scale
plt.colorbar(format="%+2.0f dB")
plt.ylim(0, 24000)  # Limit to 24 kHz
plt.title("Spectrogram (Linear Frequency Scale, dB)")

plt.tight_layout()
plt.show()
